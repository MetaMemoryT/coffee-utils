{
  "name": "coffee-utils",
  "description": "Utils that can compile CoffeeScript to js while keeping the ALL of the original comments including single line comments",
  "version": "0.1.0",
  "homepage": "http://www.transppt.com",
  "author": {
    "name": "softguy",
    "email": "softguyus@yahoo.com"
  },
  "main": "./coffee2js.js",
  "readmeFilename": "README.MD",
  "readme": "## Introduction\n\nCoffee-Utils contains utils that help you better convert coffeescripts to javascripts.\n\nIt seems that coffeescript compiler (at least at the year of 2013) will strip out single line comments started with #.\n\nYes, it can keep the block comments ###...###.\n\nHowever, not everybody prefer coffeescript syntax. Sometimes, one may prefer to use the converted .js file or read the converted .js file, especially for some java/javascript programmers, they may prefer the .js syntax while browsing/using the source code. \n\nIn those cases, lacking of the original source code may be useful,  as people said\nfrom \n\nhttps://github.com/jashkenas/coffee-script/issues/2365\n\n\"For this reason I'd find it useful to have certain single-line CoffeeScript comments appear as single-line JavaScript comments in the compiled output. Perhaps something like��\"\n\n\"Please add single line comments to the compiled code. Even if you support some limited syntax of it its fully acceptable. Just support some easy common cases, thats it!\n\nI haven't found old discussions about it, so I just tell what I think why its so important: I am at the point to think about to use cs. To ensure my code will not die if cs will die I need to be sure that generated javascript can be used instead. If all the comments gets dropped away, generated js is only half worth of its original, so I think without single line comments I am LOCKED to coffee script\"\n\n\"Also people who are not familiar with cs reading generated code without single line comments is much harder.\"\n\nAlso it seems that there might be some difficulties in fixing this immediately in the current version of  coffee-script:\n\"To summarize: We'd love to do it, but we can't figure out how to parse 'em in order to preserve comment behavior, even in theory.\"\n\"Sticking comments to the nearest tokens is easy. Propagating those to AST/compilation is the hard part.\"\n\nSo, here is an alternative way which allows one to compile the coffeescript but keep the original single line comments  - anything after # will be replace to // in the output js file.\n\n## Install\n\n    $ npm install coffee-utils\n    \n## Usage\n\n\t\tnode coffee2js.js FILE1.coffee [ FILE2.coffee .... ]\n\t\t\tor\n\t\tcoffee2js FILE1.coffee [ FILE2.coffee .... ]\n\t\t\n## How it is implemented\n\nRather than dig into the original coffee-script compiler, since current coffee-script compiler supports block comments, so I use a clever approach - pre-process the coffee script and replace single line comments into block comments and feed into the coffeescript compiler, then post-process it to generate the final output. Isn't that interesting ?!\n\n## TODO\n\tMore test cases like edge cases or something like /* */ inside String\n\n",
  "_id": "coffee-utils@0.1.0",
  "_shasum": "c8a7e1683032b703cbcacf776c6a86380abdf22f",
  "_from": "coffee-utils@0.1.0",
  "_resolved": "https://registry.npmjs.org/coffee-utils/-/coffee-utils-0.1.0.tgz"
}
